{
  "name": "nats",
  "description": "Node.js client for NATS, a lightweight messaging system",
  "version": "0.2.8",
  "repository": {
    "type": "git",
    "url": "git@github.com:derekcollison/node_nats.git"
  },
  "homepage": "https://github.com/derekcollison/node_nats",
  "author": {
    "name": "Derek Collison",
    "email": "derek.collison@gmail.com"
  },
  "keywords": [
    "messaging",
    "pubsub",
    "publish",
    "subscribe",
    "queue",
    "distributed queueing"
  ],
  "dependencies": {},
  "devDependencies": {
    "should": ">= 0.0.1",
    "mocha": "*"
  },
  "main": "index",
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.4.x <= 0.10.x"
  },
  "readme": "# Node_Nats\n\nA Node.js client for the [NATS messaging system](https://github.com/derekcollison/nats).\n\n[![Build Status](https://secure.travis-ci.org/derekcollison/node_nats.png)](http://travis-ci.org/derekcollison/node_nats)\n\n## Installation\n\n```bash\nnpm install nats\n```\n\n## Basic Usage\n\n```javascript\n\nvar nats = require('nats').connect();\n\n// Simple Publisher\nnats.publish('foo', 'Hello World!');\n\n// Simple Subscriber\nnats.subscribe('foo', function(msg) {\n  console.log('Received a message: ' + msg);\n});\n\n// Unsubscribing\nvar sid = nats.subscribe('foo', function(msg) {});\nnats.unsubscribe(sid);\n\n// Requests\nnats.request('help', function(response) {\n  console.log('Got a response for help: ' + response);\n});\n\n// Replies\nnats.subscribe('help', function(request, replyTo) {\n  nats.publish(replyTo, 'I can help!');\n});\n\n// Close connection\nnats.close();\n\nend\n```\n\n## Wildcard Subscriptions\n\n```javascript\n\n// \"*\" matches any token, at any level of the subject.\nnats.subscribe('foo.*.baz', function(msg, reply, subject) {\n  console.log('Msg received on [' + subject + '] : ' + msg);\n});\n\nnats.subscribe('foo.bar.*', function(msg, reply, subject) {\n  console.log('Msg received on [' + subject + '] : ' + msg);\n});\n\n// \">\" matches any length of the tail of a subject, and can only be the last token\n// E.g. 'foo.>' will match 'foo.bar', 'foo.bar.baz', 'foo.foo.bar.bax.22'\nnats.subscribe('foo.>', function(msg, reply, subject) {\n  console.log('Msg received on [' + subject + '] : ' + msg);\n});\n\n```\n\n## Queues Groups\n\n```javascript\n// All subscriptions with the same queue name will form a queue group.\n// Each message will be delivered to only one subscriber per queue group, queuing semantics.\n// You can have as many queue groups as you wish.\n// Normal subscribers will continue to work as expected.\nnats.subscribe('foo', {'queue':'job.workers'}, function() {\n  received += 1;\n});\n\n```\n\n## Advanced Usage\n\n```javascript\n\n// Publish with closure, callback fires when server has processed the message\nnats.publish('foo', 'You done?', function() {\n  console.log('msg processed!');\n});\n\n// Flush connection to server, callback fires when all messages have been processed.\nnats.flush(function() {\n  console.log('All clear!');\n});\n\n// Timeouts for subscriptions\nvar sid = nats.subscribe('foo', function() {\n  received += 1;\n});\n\n// Timeout unless a certain number of messages have been received\nnats.timeout(sid, timeout_ms, expected, function() {\n  timeout = true;\n});\n\n// Auto-unsubscribe after MAX_WANTED messages received\nnats.subscribe('foo', {'max':MAX_WANTED});\nnats.unsubscribe(sid, MAX_WANTED);\n\n// Multiple connections\nvar nats = require('nats');\nvar nc1 = nats.connect();\nvar nc2 = nats.connect();\n\nnc1.subscribe('foo');\nnc2.publish('foo');\n\n```\n\nSee examples and benchmarks for more information..\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2012 Derek Collison\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/derekcollison/node_nats/issues"
  },
  "_id": "nats@0.2.8",
  "_shasum": "33f17724879d019f0e229cf1327589b0214b8ad1",
  "_from": "nats@0.2.x",
  "_resolved": "https://registry.npmjs.org/nats/-/nats-0.2.8.tgz"
}
