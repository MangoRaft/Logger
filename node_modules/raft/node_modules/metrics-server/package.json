{
  "name": "metrics-server",
  "version": "0.0.1",
  "author": {
    "name": "Tim",
    "email": "mangoraft@gmail.com"
  },
  "description": "Basic metrics server and client.",
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/MangoRaft/metrics-server.git"
  },
  "keywords": [
    "metrics",
    "server",
    "udp"
  ],
  "dependencies": {
    "express": "^4.1.1",
    "mongoose": "^3.8.8",
    "punt": "^2.1.0",
    "socket.io": "^0.9.16"
  },
  "bugs": {
    "url": "https://github.com/MangoRaft/metrics-server/issues"
  },
  "readme": "# metrics-server\n\nmetrics-server is a basic metrics server and client. The client uses UDP to send metric to the server. The server stores all metric into a mongodb database.\n\n## examples\n\n```javascript\nvar usage = require('usage');\n\nvar udpServer = require('./lib/udpserver').createServer({\n\thost : '127.0.0.1',\n\tport : 4001,\n\tmongodb : {\n\t\thost : '127.0.0.1'\n\t}\n});\n\nvar webServer = require('./lib/webserver').createServer({\n\tudp : udpServer,\n\thost : '127.0.0.1',\n\tport : 4002,\n\tmongodb : {\n\t\thost : '127.0.0.1'\n\t}\n});\n\nvar memory = require('./lib/metric').createMetric({\n\thost : '127.0.0.1',\n\tport : 4001\n});\n\nvar cpu = require('./lib/metric').createMetric({\n\thost : '127.0.0.1',\n\tport : 4001\n});\n\nmemory.interval = cpu.interval = false;\nmemory.token = cpu.token = 'random-token';\n\nmemory.name = 'memory';\ncpu.name = 'cpu';\n\nvar pid = process.pid;\nsetInterval(function() {\n\n\tusage.lookup(pid, {\n\t\tkeepHistory : true\n\t}, function(err, result) {\n\t\tmemory.cb(result.memory);\n\t\tcpu.cb(result.cpu);\n\t});\n}, 1000);\n\nwebServer.start();\nudpServer.start();\nmemory.start();\ncpu.start();\n\n```\n\n## Methods\n\n    var Metrics = require('metrics-server')\n\n### var udpserver = Metrics.udpserver.createServer(opts);\nTo create the UDP server. This is used to recive metrics from the clients.\nOptions to pass in are\n```\n{\n\thost : '127.0.0.1',\n\tport : 4001,\n\tmongodb : {\n\t\thost : '127.0.0.1',\n\t\tport : 27017,\n\t\tpath : '/data/db'\n\t}\n}\n```\n\n### udpserver.start()\nCall `udpserver.start` to start the server\n\n### var webserver = Metrics.webserver.createServer(opts);\nTo create the UDP server. This is used to recive metrics from the clients.\nOptions to pass in are\n```\n{\n\thost : '127.0.0.1',\n\tport : 4002,\n\tmongodb : {\n\t\thost : '127.0.0.1',\n\t\tport : 27017,\n\t\tpath : '/data/db'\n\t}\n}\n```\n\n### webserver.start()\nCall `webserver.start` to start the server\n\n### var metric = Metrics.metric.createMetric(opts)\nThis is used to send metrics to the server.\n```\n{\n\thost : '127.0.0.1',//use the udp server host\n\tport : 4002//use the udp server port\n}\n```\n### metric.token = uuid()\n`metric.token` is used to group metrics together. The token should non guessable string.\n\n### metric.name = 'cpu'\n`metric.name` is the name of the metrics type\n\n### metric.interval = 5000\n`metric.interval` is the interval in milliseconds between calls to `metric.run()`\nIf you set this to `false` then you can manually call `metric.cb(metricValue)`\n\n### metric.run = function(cb){}\n`metric.run` is the function that is called when using `metric.interval`\n```\nmetric.run = function(cb){\n\tsetTimeout(function(){\n\t\tcb(Math.floor((Math.random() * 100) + 1));\n\t},100);\n}\n```\n### metric.cb(value)\n`metric.cb` is used when `metric.interval` is set to `false`\nYou would call it directly when you dont want call `metric.run`\n```\nsetInterval(function(){\n\tmetric.cb(Math.floor((Math.random() * 100) + 1));\n},1000);\n```\n### metric.start()\nCall `metric.start` to start collection metrics\n\n##API\n`Metrics.webserver` is used to recive metric from the database.\n\n\n### GET `/metric/:token`\nCalled to recive metrics from the DB\n#### query `name=cpu`\nQuery the database for e certen metrics name.\n#### query `from=2014-05-08T00:04:56.656Z`\nQuery the database from a certain time.\n#### query `to=2014-05-08T00:04:56.656Z`\nQuery the database to a certain time. Must include `from`.\n#### query `limit=500`\nQuery the database and pull out 500.\nDefaults to 1000, MAX is 10000.\n#### query `to=2014-05-08T00:04:56.656Z`\nQuery the database to a certain time. Must include `from`.\n\n### GET `/metric/:token/count`\nCount the metrics in the DB.\nSame query params can be sent as `/metric/:token`\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/MangoRaft/metrics-server",
  "_id": "metrics-server@0.0.1",
  "_shasum": "0e01e50a93974fb4edb0e9f18945003cb6e27f37",
  "_from": "metrics-server@0.0.1"
}
